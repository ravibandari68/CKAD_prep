As the secrets are not meant to encrypt data and can only be encoded
>echo -n 'text here' | base64  #this cmd will encode whatever you want to encode.
so anyone can decode it with:
>echo -n 'encode text' | base64 -decode #this command will decode the encoded text in the above step.


Even the key-value is store in etcd of the pod.
If you run this command the secret will be out from etcd also; (from the documentation)

> ETCDCTL_API=3 etcdctl \
   --cacert=/etc/kubernetes/pki/etcd/ca.crt   \
   --cert=/etc/kubernetes/pki/etcd/server.crt \
   --key=/etc/kubernetes/pki/etcd/server.key  \
   get /registry/secrets/default/secret1 | hexdump -C




Hence anyone can run the same command and decode this. That is where the encryption of secret data at rest comes into picture.

********First of all go through the documentation (https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)**************************************************************************

If you are running the kube-apiserver with the --encryption-provider-config command line argument, and the file that it references specifies a provider other than identity as the first encryption provider in the list, then you already have at-rest encryption enabled. 


To check that;

>ps -aux     

>ps -aux | grep kube-api
#checks api-server is running or not

Now; check if it has --encryption-provider-config enabled or not
>ps -aux | grep kube-api | grep "--encryption-provider-config"
if it return any values it is enabled, if not then it is not enabled. 

This can also be verified as:
>ls /etcd/kubernetes/manifests/

>cat /etcd/kubernetes/manifests/kube-api-server.yaml
In the options, if you can find the --encryption-provider-config; then its encrypted if not its not encrypted.

Now the actual point here is: How to Encrypt? (commands are from documentation, so don't worry to remember everything)

1. Generate a 32 bit random key as:
>head -c 32 /dev/urandom | base64

2. Create a new encryption configuration file. The contents should be similar to:

---
apiVersion: apiserver.config.k8s.io/v1
kind: EncryptionConfiguration
resources:
  - resources:
      - secrets
      - configmaps
      - pandas.awesome.bears.example
    providers:
      - aescbc:
          keys:
            - name: key1
              # See the following text for more details about the secret value
              secret: <BASE 64 ENCODED SECRET> #replace with the above generated 32 bit random key
      - identity: {} # this fallback allows reading unencrypted secrets;
                     # for example, during initial migration


3. Save the new encryption config file to /etc/kubernetes/enc/enc.yaml on the control-plane node.

Edit the manifest for the kube-apiserver static pod: /etc/kubernetes/manifests/kube-apiserver.yaml so that it includes the line:

--encryption-provider-config=/etc/kubernetes/enc/enc.yaml   # add this line in the existing yaml file 

also volume mounts to be copied from the doc. 
- name: enc                           # add this line
      mountPath: /etc/kubernetes/enc      # add this line
      readOnly: true 

also volume to be added:
- name: enc                             # add this line
    hostPath:                             # add this line
      path: /etc/kubernetes/enc           # add this line
      type: DirectoryOrCreate   

then API restarts.
>crictl pods


Now in the new kube-api-server just confirm if it has "--encryption-provider-config" :
>ps -aux | grep kube-api | grep "--encryption-provider-config"


To verify everything is perfect, just go ahead and create a secret now:
>kubectl create secret generic my-secret --from-literal=key=topsecret

and then check the etcd:
ETCDCTL_API=3 etcdctl \
   --cacert=/etc/kubernetes/pki/etcd/ca.crt   \
   --cert=/etc/kubernetes/pki/etcd/server.crt \
   --key=/etc/kubernetes/pki/etcd/server.key  \
   get /registry/secrets/default/secret1 | hexdump -C

Now you see there is randomly generated stuff, instead of the value of the key.

Now after this step, the secrets which are created after this only gets encrypted. How about the earlier created ones then? If we want to apply the same to the old secrets, then
>kubectl get secrets --all-namespaces -o json | kubectl replace -f -





